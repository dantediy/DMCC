version: 2.1

commands:
  destroy-environment:
    steps:
      - run: 
          name: destroy environment on fail
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert_migration:
    steps:
      - run:
          name: revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test frontend 
          command: |
            cd frontend
            npm install
            npm run test
  
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: test backend
          command: |
            cd backend
            npm install
            npm run test

  scan_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install tar gzip
          command: yum install -y tar gzip
      - run:
          name: deploying the backend.yml file which create ec2, sg
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: deploying the frontend.yml which create new s3 bucket
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run: sleep 180;
      - run:
          name: export ec2 ip public to inventory
          command: |
            touch inventory
            echo [web] > inventory
            cat inventory
      - run:
          name: fetch ec2 public ip
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: ~/project
          paths:
            - inventory
      - destroy-environment

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["91:00:ac:28:f2:22:31:29:9d:99:c0:3e:75:01:15:72"]
      - run:
          name: install dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - run:
          name: configure server
          command: |
            cat ~/project/.circleci/ansible/inventory
            ansible-playbook -i ~/project/.circleci/ansible/inventory ~/project/.circleci/ansible/configure-server.yml

  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/6XapDhinBi2VB1Pqyw2LJH/migration_$\{CIRCLE_WORKFLOW_ID:0:7\} -d '1'
              curl --insecure https://kvdb.io/6XapDhinBi2VB1Pqyw2LJH/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}
            fi
              echo migration failed

  deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: get Backend_URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: deploy frontend objects
          command: |
            yum install -y tar gzip
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install --lts
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy_backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["91:00:ac:28:f2:22:31:29:9d:99:c0:3e:75:01:15:72"]
      - run: 
          command: |
            yum install tar gzip python3 -y
            python3 -m pip install ansible
      - run:
          name: install openssh client
          command: |
            yum install openssh-clients -y
      - attach_workspace:
          at: ~/project/.circleci/ansible       
      - run:
          name: install dependencies
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install --lts 
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory deploy-backend.yml

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: sleep 120;
      - run:
          name: backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-2.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: switch to new s3 bucket
          command: aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: cleanup
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            echo Stack names: "${STACKS[@]}"

            echo ${CIRCLE_WORKFLOW_ID:0:7}
            echo ${OldWorkflowID}
            echo ${STACKS[@]}

            if [[ "${CIRCLE_WORKFLOW_ID}" != "${OldWorkflowID}" ]]
            then
              echo Deletinggggggggggggg ........
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo Nope
            fi

workflows:
  default:
    jobs:
      # - build_frontend
      # - build_backend
      # - test_frontend:
      #     requires: [build_frontend]
      # - test_backend:
      #     requires: [build_backend]
      # - scan_backend:
      #     requires: [build_backend]
      # - scan_frontend:
      #     requires: [build_frontend]
      # - deploy_infrastructure:
      #    requires: [test_frontend, test_backend, scan_frontend, scan_backend]
      # - configure_infrastructure:
      #     requires: [deploy_infrastructure]
      # - run_migrations:
      #     requires: [configure_infrastructure]
      # - deploy_frontend:
      #    requires: [run_migrations]
      # - deploy_backend:
      #    requires: [run_migrations]
      # - smoke_test:
      #     requires: [deploy_backend, deploy_frontend]
      # - cloudfront-update:
      #     requires: [smoke_test]
      - cleanup #:
          # requires: [cloudfront-update]

