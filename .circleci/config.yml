version: 2.1

commands:
  destroy-environment:
    steps:
      - run: 
          name: destroy environment on fail
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test frontend 
          command: |
            cd frontend
            npm install
            npm run test
  
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: test backend
          command: |
            cd backend
            npm install
            npm run test

  scan_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install tar gzip
          command: yum install -y tar gzip
      # - run:
      #     name: deploying the backend.yml file which create ec2, sg
      #     command: |
      #       aws cloudformation deploy \
      #       --template-file .circleci/files/backend.yml \
      #       --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
      #       --tags project=udapeople
      # - run:
      #     name: deploying the frontend.yml which create new s3 bucket
      #     command: |
      #       aws cloudformation deploy \
      #       --template-file .circleci/files/frontend.yml \
      #       --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
      #       --tags project=udapeople
      # - run: sleep 180;
      # - run:
      #     name: export ec2 ip public to inventory
      #     command: |
      #       touch inventory
      #       echo [all] > inventory
      #       cat inventory
      - run:
          name: fetch ec2 public ip
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: ~/project
          paths:
            - inventory
      - destroy-environment

workflows:
  default:
    jobs:
      # - build_frontend
      # - build_backend
      # - test_frontend:
      #     requires: [build_frontend]
      # - test_backend:
      #     requires: [build_backend]
      # - scan_backend:
      #     requires: [build_backend]
      # - scan_frontend:
      #     requires: [build_frontend]
      - deploy_infrastructure #:
        #  requires: [test_frontend, test_backend, scan_frontend, scan_backend]